# Cycling Stats Exploration - Project Overview

## Project Purpose
Comprehensive cycling data scraping and analysis toolkit for ProCyclingStats.com. Features race data scraping, detailed rider profile collection, and robust data management.

## Core Architecture
- **Main Scraper**: [src/async_scraper.py](mdc:src/async_scraper.py) - Core race data scraping engine
- **Rider Scraper**: [src/rider_scraper.py](mdc:src/rider_scraper.py) - Detailed rider profile scraping
- **CLI Entry**: [src/main.py](mdc:src/main.py) - Primary command-line interface
- **Testing**: [src/test_scraper.py](mdc:src/test_scraper.py) - Comprehensive validation framework
- **Progress**: [src/progress_tracker.py](mdc:src/progress_tracker.py) - Resume capability and checkpointing
- **Utilities**: [src/update_riders.py](mdc:src/update_riders.py) - Standalone rider data updater

## Database Schema
Database is located: `data/cycling_data.db`
- **races, stages, results** - Core race data tables
- **riders** - Rider profile table
- SQLite database with async operations (aiosqlite)

## Key Libraries
- `aiohttp` - Async HTTP requests with session management
- `aiosqlite` - Async SQLite operations
- `beautifulsoup4` - HTML parsing and data extraction
- `asyncio` - Concurrency control and semaphores

## Documentation
- [README.md](mdc:README.md) - Project overview, installation, and usage
- [TESTING.md](mdc:TESTING.md) - Testing framework and validation
- [docs/RIDER_SCRAPING.md](mdc:docs/RIDER_SCRAPING.md) - Complete rider profile scraping guide

## Virtual Environment
**ALWAYS USE the virtual environment in .venv. DO NOT create a new virtual environment.**
description:
globs:
alwaysApply: false
---
