# Data Management and Database Operations

## Database Architecture
- **Location**: `data/cycling_data.db` - SQLite database
- **Async Operations**: Using `aiosqlite` for non-blocking database access
- **Schema**: Races, stages, results, and rider profiles

## Core Data Tables
- **races** - Race metadata and information
- **stages** - Individual stage details for multi-stage races
- **results** - Race and stage results with rider placements
- **riders** - Detailed rider profile information

## Data Models
- **Models**: [src/models.py](mdc:src/models.py) - Data structure definitions
- **Validation**: Type hints and data validation patterns
- **Serialization**: JSON and database format handling

## Data Processing Patterns
- **Batch operations** for efficient database writes
- **Transaction management** for data consistency
- **Data deduplication** and conflict resolution
- **Historical data handling** via [src/historical_data_handler.py](mdc:src/historical_data_handler.py)

## Data Quality
- **Validation checks** before database insertion
- **Data completeness** verification
- **Format consistency** across different data sources
- **Error reporting** for data quality issues

## Storage Considerations
- **Database size** can reach GB scale for comprehensive datasets
- **Indexing strategy** for optimal query performance
- **Backup and recovery** procedures
- **Data archival** for historical datasets

## Data Access Patterns
- **Async queries** for non-blocking operations
- **Connection pooling** for efficient resource usage
- **Query optimization** for large datasets
- **Caching strategies** for frequently accessed data
description:
globs:
alwaysApply: false
---
